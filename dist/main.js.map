{"mappings":"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","sources":["src/services/igdb.js","src/index.js"],"sourcesContent":["import https from 'https'\nimport { resolve } from 'path'\n\nexport default class IGDB {\n  #clientSecret = ''\n  #req = null\n  #baseReqConfig = {\n    method: 'POST',\n    headers: { 'Content-Type': 'text/plain' }\n  }\n\n  /**\n   * IGDB class constructor\n   * @param {object} initParams initialization params for the service instance\n   * initParams: {\n   *   clientSecret\n   *   clientID\n   *   baseURL\n   * }\n   */\n  constructor(initParams) {\n    this.#clientSecret = initParams.clientSecret\n    this.#baseReqConfig = {\n      ...this.#baseReqConfig,\n      headers: {\n        ...this.#baseReqConfig.headers,\n        'Client-ID': initParams.clientID\n      },\n      hostname: initParams.baseURL\n    }\n  }\n\n  authenticate(authURL) {\n    const options = {\n      ...this.#baseReqConfig,\n      hostname: authURL,\n      path: `/oauth2/token?client_id=${this.#baseReqConfig.clientID}&client_secret=${this.#baseReqConfig.clientSecret}&grant_type=client_credentials`,\n      headers: {\n        ...this.#baseReqConfig.headers,\n        'Content-Length': 0\n      }\n    }\n\n    const req = https.request(options, (res) => {\n      res.on('data', (data) => {\n       console.log(data)\n      })\n      res.on('error', (err) => {\n        console.log(err)\n      })\n    })\n    req.write('')\n    req.end();\n  }\n  \n  /**\n   * Start \n   */\n  // request(endpoint, queryString) {\n  //   const options = {\n  //     ...this.#baseReqConfig,\n  //     headers: {\n  //       ...this.#baseReqConfig.headers,\n  //       'Content-Length': queryString.length\n  //     }\n  //   }\n\n  //   return new Promise ((resolve, reject) => {\n  //     const req = https.request(options, (res) => {\n  //       res.on('data', (data) => resolve(data))\n  //       res.on('error', (err) => reject(err))\n  //     })\n  //     req.write(queryString)\n  //     req.end();\n  //   }) \n  // }\n\n  /**\n   * Allows inspection of the base configs for the HTTPS request\n   * @returns {object} baseRequestConfig \n   */\n  readReqConfig() {\n    return Object.assign({}, this.#baseReqConfig)\n  }\n}","import IGDB from './services/igdb'\n\nconst igdbService = new IGDB(\n  'e4ys2hra3fq94qxednr11me9ijuzos',\n  'rugsgs2huvr5b0p6xw274tu7nuyxyj',\n  'api.igdb.com'\n);\n\nigdbService.authenticate('id.twitch.tv')\n  .then(result => {\n    console.log(result)\n  })\n  .catch(err => {\n    console.error(err)\n  })"],"names":["IGDB","clientSecret","req","baseReqConfig","method","headers","constructor","initParams","clientID","hostname","baseURL","authenticate","authURL","options","path","https","request","res","on","data","console","log","err","write","end","readReqConfig","Object","assign","igdbService","then","result","catch","error"],"version":3,"file":"main.js.map"}